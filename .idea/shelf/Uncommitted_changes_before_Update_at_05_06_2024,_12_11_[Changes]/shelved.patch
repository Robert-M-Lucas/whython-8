Index: .idea/git_toolbox_prj.xml
===================================================================
diff --git a/.idea/git_toolbox_prj.xml b/.idea/git_toolbox_prj.xml
deleted file mode 100644
--- a/.idea/git_toolbox_prj.xml	(revision 0c9f2172133991d55e21c1667e768f7970de4cdd)
+++ /dev/null	(revision 0c9f2172133991d55e21c1667e768f7970de4cdd)
@@ -1,15 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="GitToolBoxProjectSettings">
-    <option name="commitMessageIssueKeyValidationOverride">
-      <BoolValueOverride>
-        <option name="enabled" value="true" />
-      </BoolValueOverride>
-    </option>
-    <option name="commitMessageValidationEnabledOverride">
-      <BoolValueOverride>
-        <option name="enabled" value="true" />
-      </BoolValueOverride>
-    </option>
-  </component>
-</project>
\ No newline at end of file
Index: .idea/misc.xml
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
deleted file mode 100644
--- a/.idea/misc.xml	(revision 0c9f2172133991d55e21c1667e768f7970de4cdd)
+++ /dev/null	(revision 0c9f2172133991d55e21c1667e768f7970de4cdd)
@@ -1,6 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="Black">
-    <option name="sdkName" value="Python 3.12" />
-  </component>
-</project>
\ No newline at end of file
Index: .idea/.gitignore
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
deleted file mode 100644
--- a/.idea/.gitignore	(revision 0c9f2172133991d55e21c1667e768f7970de4cdd)
+++ /dev/null	(revision 0c9f2172133991d55e21c1667e768f7970de4cdd)
@@ -1,8 +0,0 @@
-# Default ignored files
-/shelf/
-/workspace.xml
-# Editor-based HTTP Client requests
-/httpRequests/
-# Datasource local storage ignored files
-/dataSources/
-/dataSources.local.xml
Index: .idea/whython-8.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<module type=\"EMPTY_MODULE\" version=\"4\">\n  <component name=\"FacetManager\">\n    <facet type=\"Python\" name=\"Python facet\">\n      <configuration sdkName=\"Python 3.12\" />\n    </facet>\n  </component>\n  <component name=\"NewModuleRootManager\">\n    <content url=\"file://$MODULE_DIR$\">\n      <sourceFolder url=\"file://$MODULE_DIR$/src\" isTestSource=\"false\" />\n      <sourceFolder url=\"file://$MODULE_DIR$/tests\" isTestSource=\"true\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/target\" />\n    </content>\n    <orderEntry type=\"inheritedJdk\" />\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\n    <orderEntry type=\"library\" name=\"Python 3.12 interpreter library\" level=\"application\" />\n  </component>\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/whython-8.iml b/.idea/whython-8.iml
--- a/.idea/whython-8.iml	(revision 0c9f2172133991d55e21c1667e768f7970de4cdd)
+++ b/.idea/whython-8.iml	(date 1715616877198)
@@ -1,18 +1,8 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <module type="EMPTY_MODULE" version="4">
-  <component name="FacetManager">
-    <facet type="Python" name="Python facet">
-      <configuration sdkName="Python 3.12" />
-    </facet>
-  </component>
   <component name="NewModuleRootManager">
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/tests" isTestSource="true" />
-      <excludeFolder url="file://$MODULE_DIR$/target" />
-    </content>
+    <content url="file://$MODULE_DIR$" />
     <orderEntry type="inheritedJdk" />
     <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="library" name="Python 3.12 interpreter library" level="application" />
   </component>
 </module>
\ No newline at end of file
Index: src/root.rs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// use crate::root::assembler::assemble::generate_assembly;\n// use crate::root::name_resolver::processor::process;\nuse crate::root::utils::AnyError;\nuse crate::time;\nuse clap::Parser;\nuse color_print::cprintln;\nuse std::fs;\nuse std::io::ErrorKind;\nuse std::path::PathBuf;\n\n// #[cfg(target_os = \"windows\")]\n// use crate::root::runner::run;\n// #[cfg(target_os = \"windows\")]\n// use runner::link;\n//\n// #[cfg(target_os = \"linux\")]\n// use crate::root::runner::run_wine_experimental;\n// #[cfg(target_os = \"linux\")]\n// use runner::link_gcc_experimental;\n// use crate::root::parser::parse::parse;\n\nmod assembler;\nmod custom;\nmod parser;\nmod runner;\nmod utils;\nmod name_resolver;\n\n/// Compiler for Whython files (.why)\n#[derive(Parser)]\n#[command(version, about, long_about = None)]\npub struct Args {\n    /// Main input file\n    #[arg(short, long, default_value = \"main.why\")]\n    pub input: String,\n    /// Output files name without extension\n    /// Main input file\n    #[arg(short, long, default_value = \"build/out\")]\n    pub output: String,\n    /// Only build - don't run\n    #[arg(short, long)]\n    pub build: bool,\n}\n\npub fn main() {\n\n\n    // assemble(\"build/out\").unwrap();\n    // link_gcc_experimental(\"build/out\").unwrap();\n    // run_wine_experimental(\"build/out\").unwrap();\n    // return;\n\n    let args = Args::parse();\n    let _ = main_args(args);\n}\n\npub fn main_args(args: Args) -> Result<(), AnyError> {\n    if let Some(path) = PathBuf::from(&args.output).parent() {\n        if let Err(e) = fs::create_dir_all(path) {\n            if !matches!(e.kind(), ErrorKind::AlreadyExists) {\n                cprintln!(\"<r,bold>Failed to create directories for output files</>\");\n                return Err(AnyError::Other);\n            }\n        }\n    }\n\n    print!(\"Parsing... \");\n    time!(\n        let parsed = parse(PathBuf::from(&args.input)).unwrap();\n    );\n\n\n    // print!(\"Compiling... \");\n    // time!(generate_assembly(&args.output, functions););\n    //\n    // print!(\"Assembling (NASM)... \");\n    // time!(if assemble(&args.output).is_err() {\n    //     return Err(AnyError::Other);\n    // });\n\n    // #[cfg(target_os = \"windows\")]\n    // {\n    //     println!(\"Linking (MSVC - link.exe)... \");\n    //     time!(if link(&args.output).is_err() {\n    //         return Err(AnyError::Other);\n    //     });\n    //     if args.build {\n    //         println!(\"Skipping execution\")\n    //     } else {\n    //         println!(\"Executing... \");\n    //         run(&args.output);\n    //     }\n    // }\n    // #[cfg(target_os = \"linux\")]\n    // {\n    //     cprintln!(\"<yellow,bold>Compilation and execution on Linux may be buggy!</>\");\n    //     println!(\"Linking (gcc)... \");\n    //     time!(\n    //         let res = link_gcc_experimental(&args.output);\n    //         if res.is_err() {\n    //             return Err(AnyError::Other);\n    //         }\n    //     );\n    //\n    //     if args.build {\n    //         println!(\"Skipping execution\")\n    //     } else {\n    //         println!(\"Executing (wine)... \");\n    //         if run_wine_experimental(&args.output).is_err() {\n    //             return Err(AnyError::Other);\n    //         }\n    //     }\n    // }\n\n    cprintln!(\"<g,bold>Done!</>\");\n    Ok(())\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/root.rs b/src/root.rs
--- a/src/root.rs	(revision 0c9f2172133991d55e21c1667e768f7970de4cdd)
+++ b/src/root.rs	(date 1714053420032)
@@ -21,7 +21,7 @@
 
 mod assembler;
 mod custom;
-mod parser;
+pub mod parser;
 mod runner;
 mod utils;
 mod name_resolver;
Index: src/root/name_resolver/resolve.rs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>use crate::root::parser::parse_toplevel::TopLevelToken;\n\npub fn resolve_names(ast: Vec<TopLevelToken>) {\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/root/name_resolver/resolve.rs b/src/root/name_resolver/resolve.rs
--- a/src/root/name_resolver/resolve.rs	(revision 0c9f2172133991d55e21c1667e768f7970de4cdd)
+++ b/src/root/name_resolver/resolve.rs	(date 1714053788172)
@@ -1,5 +1,13 @@
-use crate::root::parser::parse_toplevel::TopLevelToken;
+use crate::root::parser::parse_toplevel::TopLevelTokens;
 
-pub fn resolve_names(ast: Vec<TopLevelToken>) {
+struct 
 
+pub fn resolve_names(ast: Vec<TopLevelTokens>) {
+    for symbol in ast {
+        match symbol {
+            TopLevelTokens::Struct(_) => todo!(),
+            TopLevelTokens::Impl(_) => todo!(),
+            TopLevelTokens::Function(_) => todo!(),
+        }
+    }
 }
\ No newline at end of file
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"VcsDirectoryMappings\">\n    <mapping directory=\"$PROJECT_DIR$\" vcs=\"Git\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
--- a/.idea/vcs.xml	(revision 0c9f2172133991d55e21c1667e768f7970de4cdd)
+++ b/.idea/vcs.xml	(date 1715616877248)
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="VcsDirectoryMappings">
-    <mapping directory="$PROJECT_DIR$" vcs="Git" />
+    <mapping directory="" vcs="Git" />
   </component>
 </project>
\ No newline at end of file
